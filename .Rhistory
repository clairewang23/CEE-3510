setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
plot(times, BOD, type="l", axes=FALSE, ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
plot(BOD, type="l", axes=FALSE, ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #1 - radium/radon decay
# CEE 3510
# February 9, 2024
# units, concentration = curries; rate constant = 1/year
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
# create model
model_radium <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dRadium <- -1 * k * Radium
list(dRadium)
})
}
# set parameters and initial conditions
y <- c(Radium = 1000)
parms <- c(k = 0.0004279)
times <- seq(0, 10000, 500)
# solve
out_radium <- ode(y, times, model_radium, parms)
# plot
plot(out_radium, type="l", xlab="Time [years]", ylab="Concentration [Curies]", main="Radium Decay", col="red")
abline(0,0,col="blue", lty=2)
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
plot(BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #1 - radium/radon decay
# CEE 3510
# February 9, 2024
# units, concentration = curries; rate constant = 1/year
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
# create model
model_radium <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dRadium <- -1 * k * Radium
list(dRadium)
})
}
# set parameters and initial conditions
y <- c(Radium = 1000)
parms <- c(k = 0.0004279)
times <- seq(0, 10000, 500)
# solve
out_radium <- ode(y, times, model_radium, parms)
# plot
plot(out_radium, type="l", xlab="Time [years]", ylab="Concentration [Curies]", main="Radium Decay", col="red")
abline(0,0,col="blue", lty=2)
# plot
plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
View(out_BOD)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD))
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point()
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point()
+ labs(title = "BOD Decay",
x = "Time (days)", y = "BOD (mg/L)")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD))
+ geom_point()
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point() + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)")
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point() + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light()
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point() + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light() + col = 'red'
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point() + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light() + col = BOD
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD, color=sample)) + geom_point() + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light()
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_point(color = 'blue') + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light()
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light()
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light() + ylim(0,15)
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = out_BOD, mapping = aes(x = time, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Time (days)", y = "BOD (mg/L)") + theme_light() + ylim(0,15)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
View(BOD_distance)
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 0.01)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,15)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 1)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/Cornell/CEE3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 1)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
View(BOD_distance)
View(BOD_distance)
setwd("C:/Users/rabbi/OneDrive/Documents/GitHub/CEE-3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 1)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
setwd("C:/Users/rabbi/OneDrive/Documents/GitHub/CEE-3510")
#================================================================
# assignment #2 - BOD modeling
# CEE 3510
# March 2, 2025
# units, concentration = mg/L; rate constant = 1/day
# ===============================================================
# report names of objects present in working directory,
# then clears all objects in the working directory
ls()
rm(list=ls())
ls()
# install library to solve initial value problems
library(deSolve)
library(ggplot2)
# create model
model_BOD <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dBOD <- -1 * (k1 + k3) * BOD
list(c(dBOD))
})
}
# set parameters and initial conditions
y <- c(BOD = 12)
parms <- c(k1 = 0.34, k3 = 0.04)
times <- seq(0, 10, 1)
# solve
out_BOD <- ode(y, times, model_BOD, parms)
# add distance downstream to model
velocity <- 5 #km/d
distance <- velocity * times
BOD_distance <- cbind(out_BOD, distance)
# plot
ggplot(data = BOD_distance, mapping = aes(x = distance, y = BOD)) + geom_line(color = 'blue') + labs(title = "BOD Decay", x = "Distance (km)", y = "BOD (mg/L)") + theme_light() + ylim(0,14)
# plot(out_BOD, type="l", ylim=c(0,14),xlab="time (d)", ylab="BOD (mg/L)", main="BOD Decay")
